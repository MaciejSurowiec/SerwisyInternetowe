@page
@model IndexModel
@{
    ViewData["Title"] = "Home page";
}

<div class="text-center">
    <table>
        <tr>
            <td>
                <p>temperatura</p>
            </td>
            <td>
                <p>cisnienie</p>
            </td>
            <td>
                <p>czas</p>
            </td>
            <td>
                <p>guid</p>
            </td>
        </tr>
        @foreach (var item in Model.tempArray)
        {
            <tr class="item">
                <td class="Temp">
                    @item.Temp
                </td>
                <td class="cisnienie">
                    @item.cisnienie
                </td>
                <td class="timestamp">
                    @item.timestamp
                </td>
                <td class="guid">
                    @item.guid
                </td>
            </tr>
        }
    </table>
    <div style="width:75%;">
        <canvas id="canvas"></canvas>
    </div>
    <br>
    <br>
    <script>

        let myArray = document.getElementsByClassName("guid");
        var otherArray = [];

        for (var index = 0; index < myArray.length; ++index) {
            otherArray.push(myArray[index].textContent.trim())
        }


        let guids = [...new Set(otherArray)];
        var datasets = [];
        var colorNames = Object.keys(window.chartColors);
        let items = document.getElementsByClassName("item");
        for (var index = 0; index < guids.length; ++index) {
            var colorName = colorNames[(index+1) % colorNames.length];
            var newColor = window.chartColors[colorName];
            var newDataset = {
                label: guids[index],
                backgroundColor: newColor,
                borderColor: newColor,
                data: [],
                fill: false
            };

            for (var i = 0; i < items.length; i++) {
                if (items[i].getElementsByClassName("guid")[0].textContent.trim() == guids[index]) {
                    newDataset.data.push(Number(items[i].getElementsByClassName("Temp")[0].textContent.trim()));
                }
            }
            datasets.push(newDataset);
        }

        console.log(datasets);

        var config = {
            type: 'line',
            data: { datasets },
            options: {
                responsive: true,
                title: {
                    display: true,
                    text: 'Chart.js Line Chart'
                },
                tooltips: {
                    mode: 'index',
                    intersect: false,
                },
                hover: {
                    mode: 'nearest',
                    intersect: true
                },
                scales: {
                    xAxes: [{
                        display: true,
                        scaleLabel: {
                            display: true,
                            labelString: 'Guid'
                        }
                    }],
                    yAxes: [{
                        display: true,
                        scaleLabel: {
                            display: true,
                            labelString: 'temperature'
                        }
                    }]
                }
            }
        };
        console.log(config.data);
        window.onload = function () {
            var ctx = document.getElementById("canvas").getContext("2d");
            window.myLine = new Chart(ctx, config);
        };
       
    </script>

    <p>Learn about <a href="https://docs.microsoft.com/aspnet/core">building Web apps with ASP.NET Core</a>.</p>
</div>
